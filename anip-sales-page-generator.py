#!/usr/bin/env python3
"""
ANIPE Sales Page Generator Service
Creates professional sales pages with Stripe payment integration
"""

import os
import json
from datetime import datetime
from flask import Flask, request, jsonify
from google.cloud import storage
import google.generativeai as genai
import stripe

app = Flask(__name__)

# Initialize Stripe
stripe_api_key = os.environ.get("STRIPE_SECRET_KEY")
if stripe_api_key:
    stripe.api_key = stripe_api_key
    print("Stripe configured successfully")
else:
    print("Warning: STRIPE_SECRET_KEY not found - payments will use placeholder links")

def create_stripe_payment_link(product_data: dict, price: int = 2997) -> str:
    """
    Create a Stripe payment link for the product
    Returns the payment URL or a placeholder if Stripe isn't configured
    """
    try:
        if not stripe_api_key:
            return "javascript:alert('Demo Mode: Stripe not configured. Add STRIPE_SECRET_KEY to enable real payments!')"
        
        # Create a Stripe product
        product = stripe.Product.create(
            name=f"{product_data.get('niche_topic', 'Digital Report')} - AI Generated Report",
            description=f"Professional analysis and recommendations for {product_data.get('target_audience', 'business professionals')}",
            metadata={
                "source": "ANIPE-AutoGenerated",
                "niche": product_data.get('niche_topic', 'Unknown'),
                "generated_at": datetime.now().isoformat()
            }
        )
        
        # Create a price
        price_obj = stripe.Price.create(
            unit_amount=price,  # Price in cents
            currency='usd',
            product=product.id,
        )
        
        # Create payment link
        payment_link = stripe.PaymentLink.create(
            line_items=[{
                'price': price_obj.id,
                'quantity': 1,
            }],
            after_completion={
                'type': 'hosted_confirmation',
                'hosted_confirmation': {
                    'custom_message': 'Thank you for your purchase! Your digital product will be delivered to your email within 5 minutes.'
                }
            }
        )
        
        return payment_link.url
        
    except Exception as e:
        print(f"Error creating Stripe payment link: {e}")
        return "javascript:alert('Payment processing temporarily unavailable. Please try again later.')"

# Initialize GCP clients

def generate_ai_sales_copy(product_data, product_content):
    """Generate AI-powered sales copy based on the product content"""
    
    # Default sales copy in case AI fails
    default_copy = {
        "headline": f"Revolutionary {product_data.get('niche_topic', 'Digital Product')} Guide",
        "subheadline": "Transform your approach with AI-generated insights",
        "benefits": [
            "Comprehensive analysis and recommendations",
            "Data-driven insights you can't find elsewhere", 
            "Actionable strategies for immediate implementation",
            "Expert-level knowledge distilled into practical steps"
        ],
        "description": "This comprehensive guide provides cutting-edge insights that would cost thousands from consulting firms.",
        "urgency": "Limited time offer - Get instant access today!",
        "template": "modern",
        "color_scheme": "blue"
    }
    
    try:
        # Get API key and check if available
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            print("No GEMINI_API_KEY found, using default sales copy")
            return default_copy
            
        # Configure Gemini
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Create enhanced prompt for sales copy generation
        prompt = f"""
Generate compelling sales copy for a digital product based on this content:

PRODUCT TOPIC: {product_data.get('niche_topic', 'Digital Product')}
TARGET AUDIENCE: {product_data.get('target_audience', 'Professionals')}
PROBLEM STATEMENT: {product_data.get('problem_statement', 'Industry challenges')}
KEYWORDS: {', '.join(product_data.get('keywords', []))}

PRODUCT CONTENT PREVIEW:
{product_content[:1500]}...

Generate sales copy in this JSON format:
{{
    "headline": "Compelling headline that grabs attention (max 60 chars)",
    "subheadline": "Supporting subheadline that explains the value (max 120 chars)",
    "benefits": [
        "Specific benefit 1 based on actual content",
        "Specific benefit 2 based on actual content", 
        "Specific benefit 3 based on actual content",
        "Specific benefit 4 based on actual content",
        "Specific benefit 5 based on actual content"
    ],
    "description": "2-3 sentence description of what they'll get and why it's valuable",
    "urgency": "Urgency statement to encourage immediate action",
    "template": "Choose from: modern, executive, minimal, bold, elegant",
    "color_scheme": "Choose from: blue, green, purple, orange, red, teal"
}}

Template Guidelines:
- modern: Clean, contemporary design with gradients
- executive: Professional, corporate style with dark colors
- minimal: Simple, clean lines with lots of white space
- bold: High contrast, attention-grabbing design
- elegant: Sophisticated, refined styling

Choose template and colors that match the product's target audience and topic sophistication level.
Make it sound professional but exciting. Focus on the specific value this content provides.
"""
        
        response = model.generate_content(prompt)
        response_text = response.text.strip()
        
        # Clean up response if needed
        if response_text.startswith("```json"):
            response_text = response_text[7:]
        if response_text.endswith("```"):
            response_text = response_text[:-3]
            
        # Parse AI response
        ai_copy = json.loads(response_text)
        
        # Validate required fields exist
        required_fields = ['headline', 'subheadline', 'benefits', 'description', 'urgency', 'template', 'color_scheme']
        for field in required_fields:
            if field not in ai_copy:
                raise ValueError(f"Missing required field: {field}")
                
        print(f"AI sales copy generated successfully for: {ai_copy['headline']} (Template: {ai_copy['template']}, Colors: {ai_copy['color_scheme']})")
        return ai_copy
        
    except Exception as e:
        print(f"AI sales copy generation failed: {e}, using default copy")
        return default_copy

def get_template_styles(template, color_scheme):
    """Generate CSS styles based on template and color scheme"""
    
    # Color palettes
    colors = {
        "blue": {
            "primary": "#3498db",
            "secondary": "#2980b9", 
            "accent": "#e74c3c",
            "gradient": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            "text": "#2c3e50"
        },
        "green": {
            "primary": "#27ae60",
            "secondary": "#16a085",
            "accent": "#f39c12",
            "gradient": "linear-gradient(135deg, #11998e 0%, #38ef7d 100%)",
            "text": "#2c3e50"
        },
        "purple": {
            "primary": "#9b59b6",
            "secondary": "#8e44ad",
            "accent": "#e67e22",
            "gradient": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            "text": "#2c3e50"
        },
        "orange": {
            "primary": "#f39c12",
            "secondary": "#e67e22",
            "accent": "#e74c3c",
            "gradient": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
            "text": "#2c3e50"
        },
        "red": {
            "primary": "#e74c3c",
            "secondary": "#c0392b",
            "accent": "#f39c12",
            "gradient": "linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)",
            "text": "#2c3e50"
        },
        "teal": {
            "primary": "#1abc9c",
            "secondary": "#16a085",
            "accent": "#e67e22",
            "gradient": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
            "text": "#2c3e50"
        }
    }
    
    palette = colors.get(color_scheme, colors["blue"])
    
    # Template-specific styles
    if template == "executive":
        return f"""
        body {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: #ecf0f1;
        }}
        .container {{
            background: #34495e;
            border: 1px solid #4a5f7a;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            color: #ecf0f1;
        }}
        .header h1 {{
            color: #ecf0f1 !important;
            font-weight: 300;
            letter-spacing: 2px;
        }}
        .header .subtitle {{
            color: #bdc3c7 !important;
        }}
        .price {{
            color: {palette['accent']} !important;
        }}
        .buy-button {{
            background: linear-gradient(45deg, {palette['primary']}, {palette['secondary']});
            text-transform: uppercase;
            letter-spacing: 1px;
            color: white !important;
        }}
        .features h2 {{
            color: #ecf0f1 !important;
            border-bottom: 2px solid {palette['primary']};
            padding-bottom: 10px;
        }}
        .features li {{
            color: #ecf0f1 !important;
        }}
        .preview, .guarantee, .urgency, .testimonial {{
            background: #3e5266 !important;
            color: #ecf0f1 !important;
        }}
        .preview h3, .guarantee h3 {{
            color: #ecf0f1 !important;
        }}
        .stat-number {{
            color: {palette['accent']} !important;
        }}
        """
    elif template == "minimal":
        return f"""
        body {{
            background: #f8f9fa;
            color: #212529;
        }}
        .container {{
            background: white;
            border: none;
            box-shadow: 0 2px 20px rgba(0,0,0,0.05);
            border-radius: 0;
            color: #212529;
        }}
        .header {{
            border-bottom: 1px solid #dee2e6;
        }}
        .header h1 {{
            color: #212529 !important;
            font-weight: 300;
            font-size: 2.2rem;
        }}
        .header .subtitle {{
            color: #6c757d !important;
        }}
        .price {{
            color: {palette['primary']} !important;
        }}
        .buy-button {{
            background: {palette['primary']};
            border-radius: 4px;
            font-weight: 400;
            color: white !important;
        }}
        .features li:before {{
            content: "→";
            color: {palette['primary']};
        }}
        .features h2 {{
            color: #212529 !important;
        }}
        .stat-number {{
            color: {palette['primary']} !important;
        }}
        """
    elif template == "bold":
        return f"""
        body {{
            background: {palette['gradient']};
        }}
        .container {{
            background: white;
            border: 5px solid {palette['primary']};
            box-shadow: 0 30px 60px rgba(0,0,0,0.2);
            color: #2c3e50;
        }}
        .header h1 {{
            color: {palette['primary']} !important;
            font-weight: 900;
            text-transform: uppercase;
            font-size: 3rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }}
        .header .subtitle {{
            color: #34495e !important;
        }}
        .price {{
            font-size: 4rem;
            color: {palette['accent']} !important;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }}
        .buy-button {{
            background: linear-gradient(45deg, {palette['accent']}, {palette['primary']});
            text-transform: uppercase;
            font-weight: 900;
            box-shadow: 0 15px 30px rgba(0,0,0,0.2);
            color: white !important;
        }}
        .features h2 {{
            color: {palette['primary']} !important;
        }}
        .stat-number {{
            color: {palette['accent']} !important;
        }}
        """
    elif template == "elegant":
        return f"""
        body {{
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }}
        .container {{
            background: white;
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.1);
            color: {palette['text']};
        }}
        .header h1 {{
            color: {palette['text']} !important;
            font-weight: 200;
            font-family: 'Georgia', serif;
            font-size: 2.8rem;
            line-height: 1.2;
        }}
        .header .subtitle {{
            font-style: italic;
            font-size: 1.1rem;
            color: #7f8c8d !important;
        }}
        .price {{
            color: {palette['primary']} !important;
        }}
        .buy-button {{
            background: linear-gradient(45deg, {palette['primary']}, {palette['secondary']});
            border-radius: 30px;
            font-weight: 300;
            padding: 25px 50px;
            color: white !important;
        }}
        .features li {{
            border-bottom: 1px solid #f8f9fa;
            font-size: 1.1rem;
        }}
        .features h2 {{
            color: {palette['text']} !important;
        }}
        .stat-number {{
            color: {palette['primary']} !important;
        }}
        """
    else:  # modern (default)
        return f"""
        body {{
            background: {palette['gradient']};
        }}
        .container {{
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            color: #2c3e50;
        }}
        .header h1 {{
            color: {palette['text']} !important;
        }}
        .header .subtitle {{
            color: #7f8c8d !important;
        }}
        .price {{
            color: {palette['accent']} !important;
        }}
        .buy-button {{
            background: linear-gradient(45deg, {palette['primary']}, {palette['secondary']});
            color: white !important;
        }}
        .features h2 {{
            color: {palette['text']} !important;
        }}
        .stat-number {{
            color: {palette['accent']} !important;
        }}
        """

def generate_sales_page_html(product_data, product_content):
    """Generate a professional sales page HTML from product data"""
    
    # Generate AI-powered sales copy based on the product content
    sales_copy = generate_ai_sales_copy(product_data, product_content)
    
    # Extract key information
    niche_topic = product_data.get('niche_topic', 'Digital Product')
    problem_statement = product_data.get('problem_statement', 'Solving important problems')
    target_audience = product_data.get('target_audience', 'Professional audience')
    keywords = product_data.get('keywords', [])
    
    # Create a clean title and filename
    clean_title = niche_topic.replace(' ', '_').replace('/', '_')[:50]
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Generate a price based on content length and topic complexity
    content_length = len(product_content)
    base_price = min(97, max(27, (content_length // 100) + len(keywords) * 3))
    
    # Get template styles
    template_styles = get_template_styles(sales_copy['template'], sales_copy['color_scheme'])
    
    # Create the HTML template with AI-generated sales copy
    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{sales_copy['headline']} - AI-Generated Business Intelligence Report</title>
    <meta name="description" content="{sales_copy['description'][:160]}">
    <meta name="keywords" content="{', '.join(keywords)}">
    
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            margin-top: 20px;
            margin-bottom: 20px;
        }}
        
        .header {{
            text-align: center;
            padding: 40px 0;
            border-bottom: 2px solid #f0f0f0;
            margin-bottom: 30px;
        }}
        
        .header h1 {{
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }}
        
        .header .subtitle {{
            font-size: 1.2rem;
            color: #7f8c8d;
            margin-bottom: 20px;
        }}
        
        .price {{
            font-size: 3rem;
            font-weight: bold;
            margin: 20px 0;
        }}
        
        .buy-button {{
            display: inline-block;
            color: white;
            padding: 20px 40px;
            text-decoration: none;
            border-radius: 50px;
            font-size: 1.3rem;
            font-weight: bold;
            margin: 20px 0;
            transition: transform 0.3s ease;
        }}
        
        .buy-button:hover {{
            transform: translateY(-2px);
        }}
        
        .features {{
            margin: 40px 0;
        }}
        
        .features h2 {{
            margin-bottom: 20px;
            font-size: 1.8rem;
        }}
        
        .features ul {{
            list-style: none;
            padding-left: 0;
        }}
        
        .features li {{
            padding: 10px 0;
            border-bottom: 1px solid #ecf0f1;
            position: relative;
            padding-left: 30px;
        }}
        
        .features li:before {{
            content: "✓";
            position: absolute;
            left: 0;
            color: #27ae60;
            font-weight: bold;
            font-size: 1.2rem;
        }}
        
        .guarantee {{
            background: #f8f9fa;
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            margin: 30px 0;
            border-left: 5px solid #27ae60;
        }}
        
        .preview {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 5px solid #3498db;
        }}
        
        .preview h3 {{
            margin-bottom: 15px;
        }}
        
        .ai-badge {{
            display: inline-block;
            background: linear-gradient(45deg, #9b59b6, #8e44ad);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            margin: 10px 0;
        }}
        
        .urgency {{
            background: #fff3cd;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px 0;
            border-left: 5px solid #ffc107;
            font-weight: bold;
            color: #856404;
        }}
        
        .testimonial {{
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin: 25px 0;
            font-style: italic;
            border-left: 5px solid #17a2b8;
        }}
        
        .stats {{
            display: flex;
            justify-content: space-around;
            margin: 30px 0;
            text-align: center;
        }}
        
        .stat {{
            flex: 1;
            padding: 20px;
        }}
        
        .stat-number {{
            font-size: 2.5rem;
            font-weight: bold;
            color: #e74c3c;
        }}
        
        @media (max-width: 768px) {{
            .container {{ margin: 10px; padding: 15px; }}
            .header h1 {{ font-size: 2rem; }}
            .price {{ font-size: 2.5rem; }}
            .buy-button {{ padding: 15px 30px; font-size: 1.1rem; }}
            .stats {{ flex-direction: column; }}
        }}
        
        /* Apply template-specific styles */
        {template_styles}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="ai-badge">🤖 AI-Generated Business Intelligence</div>
            <h1>{sales_copy['headline']}</h1>
            <p class="subtitle">{sales_copy['subheadline']}</p>
            <div class="price">${base_price}</div>
            <a href="{create_stripe_payment_link(product_data, base_price)}" class="buy-button" id="buyButton">📈 Get Instant Access Now</a>
        </div>
        
        <div class="stats">
            <div class="stat">
                <div class="stat-number">{len(product_content.split())}</div>
                <div>Words of Content</div>
            </div>
            <div class="stat">
                <div class="stat-number">{len(sales_copy['benefits'])}</div>
                <div>Key Benefits</div>
            </div>
            <div class="stat">
                <div class="stat-number">24/7</div>
                <div>Instant Access</div>
            </div>
        </div>
        
        <div class="features">
            <h2>🎯 What You'll Get:</h2>
            <ul>
                {''.join([f'<li>{benefit}</li>' for benefit in sales_copy['benefits']])}
            </ul>
        </div>
        
        <div class="preview">
            <h3>📋 About This Report:</h3>
            <p>{sales_copy['description']}</p>
            <p><strong>Target Market:</strong> {target_audience}</p>
            <p><strong>Key Focus Areas:</strong> {', '.join(keywords[:5])}</p>
            <p><strong>Report Length:</strong> {len(product_content.split())} words of actionable content</p>
            <p><strong>Generated:</strong> {datetime.now().strftime('%B %Y')}</p>
        </div>
        
        <div class="testimonial">
            <p>"This type of AI-generated market intelligence would typically cost thousands from consulting firms. The insights are incredibly detailed and actionable." - Industry Expert</p>
        </div>
        
        <div class="urgency">
            ⚡ {sales_copy['urgency']}
        </div>
        
        <div class="guarantee">
            <h3>💯 Your Success is Guaranteed</h3>
            <p>This AI-generated report provides cutting-edge insights that would cost thousands from consulting firms. If you're not completely satisfied with the actionable intelligence provided, contact us for a full refund within 30 days.</p>
        </div>
        
        <div style="text-align: center; margin: 40px 0;">
            <a href="{create_stripe_payment_link(product_data, base_price)}" class="buy-button" id="buyButton2">🚀 Transform Your Business Today - ${base_price}</a>
        </div>
        
        <div style="text-align: center; padding: 20px; color: #7f8c8d; font-size: 0.9rem;">
            <p>Generated by ANIPE - Autonomous Niche Intelligence & Product Engine</p>
            <p>© {datetime.now().year} AI Business Intelligence. All rights reserved.</p>
            <p>Template: {sales_copy['template'].title()} | Colors: {sales_copy['color_scheme'].title()}</p>
        </div>
    </div>
    
    <script>
        // Add click tracking and redirect functionality
        document.addEventListener('DOMContentLoaded', function() {{
            const buyButtons = document.querySelectorAll('#buyButton, #buyButton2');
            buyButtons.forEach(button => {{
                button.addEventListener('click', function(e) {{
                    e.preventDefault();
                    // This will be replaced with actual payment link
                    // alert('Payment integration coming soon! Contact support to purchase this report.');
                    // window.open('PAYMENT_LINK_HERE', '_blank');
                }});
            }});
        }});
    </script>
</body>
</html>"""
    
    return html_content, f"{clean_title}_{timestamp}.html"

@app.route('/generate', methods=['POST'])
def generate_sales_page():
    """Generate a sales page from product data"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
            
        # Extract the opportunity and product content
        opportunity = data.get('opportunity', {})
        product_content = data.get('product_content', '')
        
        if not product_content:
            return jsonify({"error": "No product content provided"}), 400
        
        # Generate the sales page
        html_content, filename = generate_sales_page_html(opportunity, product_content)
        
        # Upload to GCS if configured
        gcs_url = None
        bucket_name = os.environ.get('GCS_BUCKET_NAME', 'windsurf-anipe-sales-pages')
        if bucket_name:
            try:
                client = storage.Client()
                bucket = client.bucket(bucket_name)
                blob = bucket.blob(f"sales-pages/{filename}")
                blob.upload_from_string(html_content, content_type='text/html')
                
                # Make the blob publicly accessible
                blob.make_public()
                gcs_url = blob.public_url
                print(f"Sales page uploaded: {gcs_url}")
                
            except Exception as e:
                print(f"GCS upload failed: {e}")
        
        return jsonify({
            "status": "success",
            "filename": filename,
            "gcs_url": gcs_url,
            "html_content": html_content[:500] + "..." if len(html_content) > 500 else html_content,
            "message": "Sales page generated successfully"
        })
        
    except Exception as e:
        print(f"Sales page generation failed: {e}")
        return jsonify({
            "error": str(e),
            "status": "failed"
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "service": "anip-sales-page-generator"})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=True)
