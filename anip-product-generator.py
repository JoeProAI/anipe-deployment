#!/usr/bin/env python3
"""
ANIPE Product Generator Service
Converts opportunities into professional digital products with PDF output
"""

import os
import json
import base64
from datetime import datetime
from flask import Flask, request, jsonify
from google.cloud import storage
import google.generativeai as genai
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
from io import BytesIO

# Initialize Flask app
app = Flask(__name__)

# Favicon route to prevent 404 errors
@app.route('/favicon.ico')
def favicon():
    # Return a simple 1x1 transparent PNG as binary data
    png_data = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==')
    return png_data, 200, {'Content-Type': 'image/png'}

# Initialize GCP clients
try:
    storage_client = storage.Client()
    # Configure Gemini API (using API key approach for simplicity)
    api_key = os.environ.get("GEMINI_API_KEY")
    if api_key:
        genai.configure(api_key=api_key)
    else:
        print("Warning: GEMINI_API_KEY not found, using simulated responses")
except Exception as e:
    print(f"Error initializing GCP clients: {e}")

# Get environment variables
GCS_BUCKET_NAME = os.environ.get("GCS_BUCKET_NAME", "windsurf-anipe-data")

def create_pdf_report(opportunity: dict, content: str) -> bytes:
    """
    Create a professional PDF report from the opportunity and content
    """
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, 
                           topMargin=72, bottomMargin=18)
    
    # Define styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2c3e50')
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=12,
        spaceBefore=12,
        textColor=colors.HexColor('#34495e')
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=6,
        alignment=TA_JUSTIFY,
        leftIndent=0,
        rightIndent=0
    )
    
    # Build the document
    story = []
    
    # Title Page
    title = opportunity.get('niche_topic', 'Business Intelligence Report')
    story.append(Paragraph(title, title_style))
    story.append(Spacer(1, 20))
    
    # Subtitle
    subtitle = f"AI-Generated Market Analysis & Strategic Recommendations"
    story.append(Paragraph(subtitle, styles['Heading3']))
    story.append(Spacer(1, 30))
    
    # Executive Summary Table
    summary_data = [
        ['Target Market', opportunity.get('target_audience', 'Professional audience')],
        ['Problem Statement', opportunity.get('problem_statement', 'Market challenge')],
        ['Opportunity Score', f"{opportunity.get('opportunity_score', 85)}/100"],
        ['Generated', datetime.now().strftime('%B %d, %Y')],
        ['Report Length', f"{len(content.split())} words"]
    ]
    
    summary_table = Table(summary_data, colWidths=[2.5*inch, 4*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (0,-1), colors.HexColor('#ecf0f1')),
        ('TEXTCOLOR', (0,0), (-1,-1), colors.black),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (0,-1), 'Helvetica-Bold'),
        ('FONTNAME', (1,0), (1,-1), 'Helvetica'),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#bdc3c7'))
    ]))
    
    story.append(summary_table)
    story.append(PageBreak())
    
    # Content sections
    story.append(Paragraph("Executive Summary", heading_style))
    
    # Split content into paragraphs and add to story
    paragraphs = content.split('\n\n')
    for para in paragraphs:
        if para.strip():
            story.append(Paragraph(para.strip(), body_style))
            story.append(Spacer(1, 6))
    
    # Footer
    story.append(Spacer(1, 30))
    story.append(Paragraph("Generated by ANIPE - Autonomous Niche Intelligence & Product Engine", 
                          styles['Normal']))
    
    # Build PDF
    doc.build(story)
    
    # Get the PDF data
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# --- Helper Function: Generate Product Content with AI ---
def generate_product_content(opportunity: dict) -> str:
    """
    Uses Gemini AI to generate content for the digital product based on the identified opportunity.
    Falls back to simulated responses if AI is unavailable.
    """
    niche_topic = opportunity.get("niche_topic", "an unspecified niche")
    product_idea = opportunity.get("product_idea", "a detailed report")
    problem_statement = opportunity.get("problem_statement", "a general problem")
    target_audience = opportunity.get("target_audience", "general audience")
    
    prompt = f"""
    Generate a comprehensive, high-quality digital product for the following opportunity:
    
    Product Idea: {product_idea}
    Niche Topic: {niche_topic}
    Problem Addressed: {problem_statement}
    Target Audience: {target_audience}
    
    Create a professional report or guide with the following structure:
    1. Executive Summary (2-3 paragraphs)
    2. Introduction to the Problem (detailed explanation)
    3. Market Analysis (current trends, opportunities)
    4. Detailed Solution/Strategy (at least 3 main sections with actionable insights)
    5. Implementation Guidelines (step-by-step recommendations)
    6. Tools and Resources (specific recommendations)
    7. Future Outlook and Trends
    8. Conclusion with Key Takeaways
    
    Make it authoritative, valuable, and actionable for the target audience.
    The content should be comprehensive (aim for 2000+ words) and provide genuine value.
    Use professional formatting with clear headings and bullet points where appropriate.
    """
    
    # Try to use Gemini AI
    try:
        if os.environ.get("GEMINI_API_KEY"):
            model = genai.GenerativeModel('gemini-1.5-flash')
            response = model.generate_content(prompt)
            print(f"AI product generation successful for: {niche_topic}")
            return f"# AI-Generated Product Report\n\n{response.text}\n\n---\n*Generated using Gemini AI*"
        else:
            raise Exception("No API key available")
            
    except Exception as e:
        error_msg = f"AI product generation failed: {str(e)}"
        print(error_msg)
        
        # Fallback to simulated response with error details
        simulated_response = f"""
# Executive Summary

This is a simulated executive summary for the product idea: {product_idea}.

# Introduction to the Problem

The problem statement is: {problem_statement}.

# Detailed Analysis/Solution

This is a simulated detailed analysis/solution for the problem statement.

# Actionable Recommendations or Next Steps

These are simulated actionable recommendations or next steps for the target audience: {target_audience}.

# Conclusion

This is a simulated conclusion for the product idea.

---
*Generated using simulated AI response*
*Debug Error: {error_msg}*
"""
        
        return simulated_response

# --- API Endpoint ---
@app.route('/generate', methods=['POST'])
def generate_product():
    """API endpoint to generate a product from an opportunity."""
    try:
        # Get opportunity data from request
        data = request.get_json()
        if not data or 'opportunity' not in data:
            return jsonify({"status": "error", "message": "No opportunity data provided"}), 400
        
        opportunity = data['opportunity']
        
        # Optionally retrieve from GCS if only a path is provided
        gcs_path = data.get('gcs_path', None)
        if not opportunity and gcs_path:
            try:
                # Extract bucket and blob name from gs:// URL
                path_parts = gcs_path.replace('gs://', '').split('/', 1)
                if len(path_parts) == 2:
                    bucket_name, blob_name = path_parts
                    bucket = storage_client.bucket(bucket_name)
                    blob = bucket.blob(blob_name)
                    opportunity_json = blob.download_as_text()
                    opportunity = json.loads(opportunity_json)
            except Exception as e:
                print(f"Error retrieving opportunity from GCS: {e}")
                return jsonify({"status": "error", "message": f"Failed to retrieve opportunity from GCS: {e}"}), 500
        
        print(f"Generating product for niche: {opportunity.get('niche_topic', 'N/A')}")
        
        # Generate product content using AI
        product_content = generate_product_content(opportunity)
        
        # Create PDF report
        pdf_data = create_pdf_report(opportunity, product_content)
        
        # Save the generated PDF to GCS
        # Sanitize niche_topic for filename (use fallback if missing)
        niche_topic = opportunity.get('niche_topic', 'unknown_niche')
        safe_niche_topic = niche_topic.replace(' ', '_').replace('/', '-').replace(':', '').replace(',', '')
        product_blob_name = f"products/{safe_niche_topic}_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
        product_blob = storage_client.bucket(GCS_BUCKET_NAME).blob(product_blob_name)
        product_blob.upload_from_string(pdf_data, content_type="application/pdf")
        
        # Also save text content for sales page generation
        content_blob_name = f"products/{safe_niche_topic}_{datetime.now().strftime('%Y%m%d%H%M%S')}_content.txt"
        content_blob = storage_client.bucket(GCS_BUCKET_NAME).blob(content_blob_name)
        content_blob.upload_from_string(product_content, content_type="text/plain")
        
        # Return success response
        response = {
            "status": "success", 
            "message": "Product PDF generated and saved.", 
            "content": product_content,  # Add the actual content for the workflow
            "product_gcs_path": f"gs://{GCS_BUCKET_NAME}/{product_blob_name}",
            "content_gcs_path": f"gs://{GCS_BUCKET_NAME}/{content_blob_name}",
            "opportunity": opportunity
        }
        return jsonify(response), 200
            
    except Exception as e:
        print(f"Error in generate_product: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Health check endpoint
@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint for Cloud Run."""
    return jsonify({"status": "healthy", "service": "anip-product-generator"}), 200

# Main entry point
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port, debug=False)
